/* libimago */

#ifndef IMAGE_PROCESSOR_H
#define IMAGE_PROCESSOR_H

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum ColorType {
  L8,
  L16,
  La8,
  La16,
  Rgb8,
  Rgb16,
  Rgb32F,
  Rgba8,
  Rgba16,
  Rgba32F,
} ColorType;

typedef enum Degree {
  Deg90,
  Deg180,
  Deg270,
} Degree;

typedef enum Direction {
  Horizontal,
  Vertical,
} Direction;

typedef enum FilterType {
  Nearest,
  Triangle,
  CatmullRom,
  Gaussian,
  Lanczos3,
} FilterType;

typedef enum Format {
  Avif,
  Bmp,
  Dds,
  Farbfeld,
  Gif,
  Hdr,
  Ico,
  Jpeg,
  OpenExr,
  Pcx,
  Png,
  Pnm,
  Qoi,
  Tga,
  Tiff,
  WebP,
} Format;

typedef enum ImagoStatus {
  OK,
  InvalidPath,
  InvalidInputBuffer,
  InvalidOperation,
  InvalidInputFormat,
  InvalidOutputFormat,
  UnsupportedImageFormat,
  LoadFailed,
  EncodeFailed,
  NullContext,
} ImagoStatus;

typedef struct Context Context;

typedef struct ImagoError ImagoError;

typedef struct OptionalFormat {
  bool has_value;
  enum Format value;
} OptionalFormat;

typedef struct ImageInfo {
  uint32_t width;
  uint32_t height;
  struct OptionalFormat format;
  enum ColorType color;
  uintptr_t file_size;
  bool has_alpha;
  double aspect_ratio;
} ImageInfo;

typedef struct ByteArray {
  uintptr_t len;
  const uint8_t *data;
} ByteArray;

enum Operation_Tag {
  Resize,
  Rotate,
  Flip,
  GrayScale,
  Blur,
  Brighten,
  Contrast,
  Quality,
  Convert,
};
typedef uint8_t Operation_Tag;

typedef struct Resize_Body {
  uint32_t w;
  uint32_t h;
  enum FilterType filter;
  bool exact;
} Resize_Body;

typedef struct Operation {
  Operation_Tag tag;
  union {
    Resize_Body resize;
    struct {
      enum Degree rotate;
    };
    struct {
      enum Direction flip;
    };
    struct {
      float blur;
    };
    struct {
      int32_t brighten;
    };
    struct {
      float contrast;
    };
    struct {
      uint8_t quality;
    };
    struct {
      enum Format convert;
    };
  };
} Operation;



struct ImageInfo *get_image_info(struct Context *ctx, const char *input_path);

struct ImageInfo *get_buffer_info(struct Context *ctx,
                                  const uint8_t *buffer_data,
                                  uintptr_t buffer_len);

void destroy_image_info(struct ImageInfo *image_info);

struct Context *make_context(void);

void destroy_context(struct Context *ctx);

enum ImagoStatus get_status(struct Context *ctx);

char *get_error_message(struct Context *ctx);

void destroy_error_message(char *msg);

struct ByteArray *process_image(struct Context *ctx,
                                const char *input_path,
                                const struct Operation *operations_data,
                                uintptr_t operations_len);

struct ByteArray *process_buffer(struct Context *ctx,
                                 uint8_t *content,
                                 uintptr_t content_len,
                                 const enum Format *input_format,
                                 const struct Operation *operations_data,
                                 uintptr_t operations_len);

void destroy_output_buffer(struct ByteArray *bytes);

void print_operations(const struct Operation *operations_data, uintptr_t operations_len);

#endif  /* IMAGE_PROCESSOR_H */
