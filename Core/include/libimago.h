/* libimago */

#ifndef IMAGE_PROCESSOR_H
#define IMAGE_PROCESSOR_H

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum Degree {
  Deg90 = 0,
  Deg180 = 1,
  Deg270 = 2,
} Degree;

typedef enum Direction {
  Horizontal = 0,
  Vertical = 1,
} Direction;

typedef enum FilterType {
  Nearest = 0,
  Triangle = 1,
  CatmullRom = 2,
  Gaussian = 3,
  Lanczos3 = 4,
} FilterType;

typedef enum ImagoStatus {
  OK = 0,
  InvalidPath = 1,
  InvalidOperation = 2,
  InvalidOutputFormat = 3,
  LoadFailed = 4,
  EncodeFailed = 5,
  NullContext = 6,
} ImagoStatus;

typedef struct Context Context;

enum Operation_Tag {
  Resize,
  Rotate,
  Flip,
  GrayScale,
  Blur,
  Brighten,
  Contrast,
};
typedef uint8_t Operation_Tag;

typedef struct Resize_Body {
  uint32_t w;
  uint32_t h;
  enum FilterType filter;
  bool exact;
} Resize_Body;

typedef struct Operation {
  Operation_Tag tag;
  union {
    Resize_Body resize;
    struct {
      enum Degree rotate;
    };
    struct {
      enum Direction flip;
    };
    struct {
      float blur;
    };
    struct {
      int32_t brighten;
    };
    struct {
      float contrast;
    };
  };
} Operation;

enum OutputFormat_Tag {
  WebP = 0,
  Png = 1,
  Jpeg = 2,
};
typedef uint8_t OutputFormat_Tag;

typedef struct OutputFormat {
  OutputFormat_Tag tag;
  union {
    struct {
      uint8_t jpeg;
    };
  };
} OutputFormat;

typedef struct ByteArray {
  const uint8_t *data;
  uintptr_t len;
} ByteArray;

struct Context *make_context(void);

void destroy_context(struct Context *ctx);

enum ImagoStatus get_status(struct Context *ctx);

uintptr_t get_output_len(struct Context *ctx);

uint8_t *process_image(struct Context *ctx,
                       const char *input_path,
                       const struct Operation *operations_data,
                       uintptr_t operations_len,
                       const struct OutputFormat *output_format);

uint8_t *process_buffer(struct Context *ctx,
                        uint8_t *content,
                        uintptr_t content_len,
                        const struct Operation *operations_data,
                        uintptr_t operations_len,
                        const struct OutputFormat *output_format);

void destroy_output_buffer(uint8_t *contents, uintptr_t len);

void print_operations(const struct Operation *operations_data, uintptr_t operations_len);

#endif  /* IMAGE_PROCESSOR_H */
